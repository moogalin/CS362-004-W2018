***************************************
*         Testing: isGameOver()   
***************************************

*       PASS: Game over with 3 empty supply decks
*       PASS: Game over with no provence cards
*       PASS: Game over with non-zero province and <3 empty decks
***************************************
*       Overall: All Tests Passed      
***************************************

***************************************
*         Testing: endTurn()   
***************************************

*       PASS: When current player is not last player, next player is not first player
*       PASS: When current player is last player, next player is first player
*       PASS: Next player equals expected result
*       PASS: Previous player's hand is empty
*       PASS: Next player's hand has 5 cards
*       PASS: Next player has exactly 1 action
*       PASS: Next player has exactly 1 buy
*       PASS: Turn phase is correct
*       PASS: Outpost played reset
*       PASS: Played card count is zero
***************************************
*       Overall: All Tests Passed      
***************************************

***************************************
*         Testing: buyCard()   
***************************************

*       PASS: Purchase with no buys didn't change game state
*       PASS: Purchase with no supply of card didn't change game state
*       PASS: Purchase with less coins than cost of card didn't change game state
*       PASS: Player received card in discard pile
*       PASS: Supply of bought card reduced by one
*       PASS: Total coins decreased with purchase
***************************************
*       Overall: All Tests Passed      
***************************************

***************************************
*         Testing: updateCoins()   
***************************************

*       PASS: Expected copper coins and actual coins are equal.
*       PASS: Expected silver coins and actual coins are equal.
*       PASS: Expected gold coins and actual coins are equal.
*       PASS: Game state didn't change with no coins in hand.
***************************************
*       Overall: All Tests Passed      
***************************************

***************************************
*         Testing: Smithy Card   
***************************************

*       FAIL: Actual handCount 8 does not equal Expected 7
*       PASS: Actual discardCount 6 equals Expected 6
*       FAIL: Actual deckCount 0 does not equal Expected 2
***************************************
*       Overall: One or more Tests Failed
***************************************

***************************************
*         Testing: Mine Card   
***************************************

*TEST: Cannot trash non-treasure cards
*       PASS: Game state didn't change on invalid trash choice
*TEST: Cannot gain non-treasure cards
*       PASS: Game state didn't change on invalid gain choice
*TEST: Cannot get treasure worth > 3 more than treasure in hand
*       FAIL: Game state changed purchasing gold from copper
*TEST: Can get treasure worth <= 3 more than treasure in hand
*       PASS: Game state changed purchasing silver from copper
*       PASS: Actual handCount 5 equals expected
*       FAIL: Actual discardCount 5 does not equal Expected 6
*       PASS: Actual trashed card 4 equals expected and trashed count is as expected
***************************************
*       Overall: One or more Tests Failed
***************************************

***************************************
*         Testing: Adventure Card   
***************************************

*TEST: Verify that two treasures in deck works as expected
*       FAIL: Actual deckCount 5 does not equal Expected 3
*       FAIL: Last two in hand are: 3 and 7
*       FAIL: Handcount is 5 and expected 6
*TEST: Verify that no treasure in deck works as expected
*       PASS: Deck contains different cards, successfully shuffled
*       FAIL: Last two in hand are: 4 and 7
***************************************
*       Overall: One or more Tests Failed
***************************************

***************************************
*         Testing: Village Card   
***************************************

*TEST: Test Actions = 0
*TEST: Verify Actions increases by 2
*       PASS: Actual deckCount 4 equals Expected 4
*       PASS: Actual handCount 5 equals Expected 5
*       FAIL: Actual numActions 3 does not equal Expected 2
*TEST: Test Actions = 1
*TEST: Verify Actions increases by 2
*       PASS: Actual deckCount 4 equals Expected 4
*       PASS: Actual handCount 5 equals Expected 5
*       FAIL: Actual numActions 4 does not equal Expected 3
*TEST: Test handCount = 0
*TEST: Verify HandCount stays the same (1 drawn card, 1 discarded card)
*       PASS: Actual deckCount 4 equals Expected 4
*       PASS: Actual handCount 0 equals Expected 0
*       FAIL: Actual numActions 8 does not equal Expected 7
*TEST: Test handCount = 1
*TEST: Verify HandCount stays the same (1 drawn card, 1 discarded card)
*       PASS: Actual deckCount 4 equals Expected 4
*       PASS: Actual handCount 1 equals Expected 1
*       FAIL: Actual numActions 8 does not equal Expected 7
***************************************
*       Overall: One or more Tests Failed
***************************************

File 'dominion.c'
Lines executed:38.53% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1080:    8:int compare(const void* a, const void* b) {
     1080:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     1080:   11:  if (*(int*)a < *(int*)b)
      288:   12:    return -1;
      792:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:    int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       18:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:    struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       18:   44:  SelectStream(1);
       18:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
       18:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      198:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1980:   59:    for (j = 0; j < 10; j++)
        -:   60:    {
     1800:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
        -:   65:    }
        -:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       18:   73:  if (numPlayers == 2)
        -:   74:  {
    #####:   75:    state->supplyCount[curse] = 10;
        -:   76:  }
       18:   77:  else if (numPlayers == 3)
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
        -:   80:  }
        -:   81:  else
        -:   82:  {
       18:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
       18:   87:  if (numPlayers == 2)
        -:   88:  {
    #####:   89:    state->supplyCount[estate] = 8;
    #####:   90:    state->supplyCount[duchy] = 8;
    #####:   91:    state->supplyCount[province] = 8;
        -:   92:  }
        -:   93:  else
        -:   94:  {
       18:   95:    state->supplyCount[estate] = 12;
       18:   96:    state->supplyCount[duchy] = 12;
       18:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
       18:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       18:  102:  state->supplyCount[silver] = 40;
       18:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      378:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     2970:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
     2790:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      180:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
       36:  115:          if (numPlayers == 2){
    #####:  116:            state->supplyCount[i] = 8;
        -:  117:          }
       18:  118:          else{ state->supplyCount[i] = 12; }
        -:  119:        }
        -:  120:        else
        -:  121:        {
      162:  122:          state->supplyCount[i] = 10;
        -:  123:        }
      180:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     2610:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:    }
        -:  131:
        -:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       90:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:  {
       72:  140:    state->deckCount[i] = 0;
      288:  141:    for (j = 0; j < 3; j++)
        -:  142:    {
      216:  143:      state->deck[i][j] = estate;
      216:  144:      state->deckCount[i]++;
        -:  145:    }
      576:  146:    for (j = 3; j < 10; j++)
        -:  147:    {
      504:  148:      state->deck[i][j] = copper;
      504:  149:      state->deckCount[i]++;
        -:  150:    }
        -:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
       90:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:  {
       72:  156:    if ( shuffle(i, state) < 0 )
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
        -:  160:  }
        -:  161:
        -:  162:  //draw player hands
       90:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:  {
        -:  165:    //initialize hand size to zero
       72:  166:    state->handCount[i] = 0;
       72:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
        -:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      504:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:  {
      486:  178:    state->embargoTokens[i] = 0;
        -:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
       18:  182:  state->outpostPlayed = 0;
       18:  183:  state->phase = 0;
       18:  184:  state->numActions = 1;
       18:  185:  state->numBuys = 1;
       18:  186:  state->playedCardCount = 0;
       18:  187:  state->whoseTurn = 0;
       18:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      108:  192:  for (it = 0; it < 5; it++){
       90:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       18:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       18:  198:  return 0;
        -:  199:}
        -:  200:
       72:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       72:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       72:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       72:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      864:  214:  while (state->deckCount[player] > 0) {
      720:  215:    card = floor(Random() * state->deckCount[player]);
      720:  216:    newDeck[newDeckPos] = state->deck[player][card];
      720:  217:    newDeckPos++;
     2320:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1600:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      720:  221:    state->deckCount[player]--;
        -:  222:  }
      792:  223:  for (i = 0; i < newDeckPos; i++) {
      720:  224:    state->deck[player][i] = newDeck[i];
      720:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       72:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
        1:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       13:  320:int supplyCount(int card, struct gameState *state) {
       13:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
        -:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
        -:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
        -:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       14:  346:int whoseTurn(struct gameState *state) {
       14:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        3:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
       14:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       11:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       11:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       18:  380:  for (k = 0; k < 5; k++){
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        3:  387:  return 0;
        -:  388:}
        -:  389:
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
        -:  396:  {
        1:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
        -:  403:  {
       50:  404:    if (state->supplyCount[i] == 0)
        -:  405:    {
        3:  406:      j++;
        -:  407:    }
        -:  408:  }
        2:  409:  if ( j >= 3)
        -:  410:  {
        1:  411:    return 1;
        -:  412:  }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
        -:  468:    {
    #####:  469:      players[i] = -9999;
        -:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
        -:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
        -:  482:    {
    #####:  483:      j = i;
        -:  484:    }
        -:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
        -:  493:    {
    #####:  494:      players[i]++;
        -:  495:    }
        -:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
        -:  503:    {
    #####:  504:      j = i;
        -:  505:    }
        -:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
        -:  513:    {
    #####:  514:      players[i] = 1;
        -:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
        -:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      114:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      114:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      114:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      114:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      114:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      114:  576:    state->deckCount[player]--;
      114:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      114:  580:  return 0;
        -:  581:}
        -:  582:
        9:  583:int getCost(int cardNumber)
        -:  584:{
        9:  585:  switch( cardNumber )
        -:  586:  {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z) {
    #####:  647:  while(drawntreasure<2){
    #####:  648:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:       shuffle(currentPlayer, state); //intentional bug
        -:  650:    }
    #####:  651:    drawCard(currentPlayer, state);
    #####:  652:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  653:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  654:      drawntreasure++;
        -:  655:    else{
    #####:  656:      temphand[z]=cardDrawn;
    #####:  657:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  658:      z++;
        -:  659:    }
        -:  660:  }
    #####:  661:  while(z-1>=0){
    #####:  662:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  663:    z=z-1;
        -:  664:  }
    #####:  665:  return 0;
        -:  666:}
        -:  667:
    #####:  668:int council_roomEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  669:  //+4 Cards
    #####:  670:  for (int i = 0; i < 3; i++) //intentional bug
        -:  671:  {
    #####:  672:    drawCard(currentPlayer, state);
        -:  673:  }
        -:  674:
        -:  675:  //+1 Buy
    #####:  676:  state->numBuys++;
        -:  677:
        -:  678:  //Each other player draws a card
    #####:  679:  for (int i = 0; i < state->numPlayers; i++)
        -:  680:  {
    #####:  681:    if ( i != currentPlayer )
        -:  682:    {
    #####:  683:      drawCard(i, state);
        -:  684:    }
        -:  685:  }
        -:  686:
        -:  687:  //put played card in played card pile
    #####:  688:  discardCard(handPos, currentPlayer, state, 0);
        -:  689:
    #####:  690:  return 0;
        -:  691:}
        -:  692:
    #####:  693:int gardensEffect() {
    #####:  694:  return -1;
        -:  695:}
        -:  696:
        1:  697:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  698:  //+3 Cards
        5:  699:  for (int i = 0; i < 4; i++) //intentional bug
        -:  700:  {
        4:  701:    drawCard(currentPlayer, state);
        -:  702:  }
        -:  703:
        -:  704:  //discard card from hand
        1:  705:  discardCard(handPos, currentPlayer, state, 0);
        1:  706:  return 0;
        -:  707:}
        -:  708:
        5:  709:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  710:  //+1 Card
        5:  711:  drawCard(currentPlayer, state);
        -:  712:
        -:  713:  //+2 Actions
        5:  714:  state->numActions = state->numActions + 3; //intentional bug
        -:  715:
        -:  716:  //discard played card from hand
        5:  717:  discardCard(handPos, currentPlayer, state, 0);
        5:  718:  return 0;
        -:  719:}
        -:  720:
       11:  721:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  722:{
        -:  723:  int i;
        -:  724:  int j;
        -:  725:  int k;
        -:  726:  int x;
        -:  727:  int index;
       11:  728:  int currentPlayer = whoseTurn(state);
       11:  729:  int nextPlayer = currentPlayer + 1;
       11:  730:  int tributeRevealedCards[2] = {-1, -1};
        -:  731:  int temphand[MAX_HAND];// moved above the if statement
       11:  732:  int drawntreasure=0;
       11:  733:  int z = 0;// this is the counter for the temp hand
       11:  734:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  735:    nextPlayer = 0;
        -:  736:  }
        -:  737:
        -:  738:
        -:  739:  //uses switch to select card and perform actions
       11:  740:  switch( card )
        -:  741:  {
        -:  742:    case adventurer:
    #####:  743:      adventurerEffect(drawntreasure, state, currentPlayer, temphand, z);
        -:  744:
        -:  745:    case council_room:
    #####:  746:      council_roomEffect(currentPlayer, state, handPos);
        -:  747:
        -:  748:    case feast:
        -:  749:      //gain card with cost up to 5
        -:  750:      //Backup hand
    #####:  751:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  752:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  753:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  754:      }
        -:  755:      //Backup hand
        -:  756:
        -:  757:      //Update Coins for Buy
    #####:  758:      updateCoins(currentPlayer, state, 5);
    #####:  759:      x = 1;//Condition to loop on
    #####:  760:      while( x == 1) {//Buy one card
    #####:  761:        if (supplyCount(choice1, state) <= 0){
        -:  762:          if (DEBUG)
        -:  763:            printf("None of that card left, sorry!\n");
        -:  764:
        -:  765:          if (DEBUG){
        -:  766:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  767:          }
        -:  768:        }
    #####:  769:        else if (state->coins < getCost(choice1)){
    #####:  770:          printf("That card is too expensive!\n");
        -:  771:
        -:  772:          if (DEBUG){
        -:  773:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  774:          }
        -:  775:        }
        -:  776:        else{
        -:  777:
        -:  778:          if (DEBUG){
        -:  779:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  780:          }
        -:  781:
    #####:  782:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  783:          x = 0;//No more buying cards
        -:  784:
        -:  785:          if (DEBUG){
        -:  786:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  787:          }
        -:  788:
        -:  789:        }
        -:  790:      }
        -:  791:
        -:  792:      //Reset Hand
    #####:  793:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  794:        state->hand[currentPlayer][i] = temphand[i];
    #####:  795:        temphand[i] = -1;
        -:  796:      }
        -:  797:      //Reset Hand
        -:  798:
    #####:  799:      return 0;
        -:  800:
        -:  801:    case gardens:
    #####:  802:      gardensEffect();
        -:  803:
        -:  804:    case mine:
        4:  805:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  806:
        4:  807:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  808:      {
        1:  809:        return -1;
        -:  810:      }
        -:  811:
        3:  812:      if (choice2 > treasure_map || choice2 < curse)
        -:  813:      {
    #####:  814:        return -1;
        -:  815:      }
        -:  816:
        3:  817:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  818:      {
        1:  819:        return -1;
        -:  820:      }
        -:  821:
        2:  822:      gainCard(choice2, state, 2, currentPlayer);
        -:  823:
        -:  824:      //discard card from hand
        2:  825:      discardCard(handPos, currentPlayer, state, 0);
        -:  826:
        -:  827:      //discard trashed card
       12:  828:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  829:      {
       10:  830:        if (state->hand[currentPlayer][i] == j)
        -:  831:        {
    #####:  832:          discardCard(i, currentPlayer, state, 0);
    #####:  833:          break;
        -:  834:        }
        -:  835:      }
        -:  836:
        2:  837:      return 0;
        -:  838:
        -:  839:    case remodel:
    #####:  840:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  841:
    #####:  842:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  843:      {
    #####:  844:        return -1;
        -:  845:      }
        -:  846:
    #####:  847:      gainCard(choice2, state, 0, currentPlayer);
        -:  848:
        -:  849:      //discard card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
        -:  851:
        -:  852:      //discard trashed card
    #####:  853:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  854:      {
    #####:  855:        if (state->hand[currentPlayer][i] == j)
        -:  856:        {
    #####:  857:          discardCard(i, currentPlayer, state, 0);
    #####:  858:          break;
        -:  859:        }
        -:  860:      }
        -:  861:
        -:  862:
    #####:  863:      return 0;
        -:  864:
        -:  865:    case smithy:
        1:  866:      smithyEffect(currentPlayer, state, handPos);
        -:  867:
        -:  868:    case village:
        5:  869:      villageEffect(currentPlayer, state, handPos);
        -:  870:
        -:  871:    case baron:
        5:  872:      state->numBuys++;//Increase buys by 1!
        5:  873:      if (choice1 > 0){//Boolean true or going to discard an estate
        4:  874:        int p = 0;//Iterator for hand!
        4:  875:        int card_not_discarded = 1;//Flag for discard set!
       27:  876:        while(card_not_discarded){
       19:  877:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  878:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  879:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  880:            state->discardCount[currentPlayer]++;
    #####:  881:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  882:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  883:            }
    #####:  884:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  885:            state->handCount[currentPlayer]--;
    #####:  886:            card_not_discarded = 0;//Exit the loop
        -:  887:          }
       19:  888:          else if (p > state->handCount[currentPlayer]){
        -:  889:            if(DEBUG) {
        -:  890:              printf("No estate cards in your hand, invalid choice\n");
        -:  891:              printf("Must gain an estate if there are any\n");
        -:  892:            }
        4:  893:            if (supplyCount(estate, state) > 0){
    #####:  894:              gainCard(estate, state, 0, currentPlayer);
    #####:  895:              state->supplyCount[estate]--;//Decrement estates
    #####:  896:              if (supplyCount(estate, state) == 0){
    #####:  897:                isGameOver(state);
        -:  898:              }
        -:  899:            }
        4:  900:            card_not_discarded = 0;//Exit the loop
        -:  901:          }
        -:  902:
        -:  903:          else{
       15:  904:            p++;//Next card
        -:  905:          }
        -:  906:        }
        -:  907:      }
        -:  908:
        -:  909:      else{
        1:  910:        if (supplyCount(estate, state) > 0){
        1:  911:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  912:          state->supplyCount[estate]--;//Decrement Estates
        1:  913:          if (supplyCount(estate, state) == 0){
    #####:  914:            isGameOver(state);
        -:  915:          }
        -:  916:        }
        -:  917:      }
        -:  918:
        -:  919:
        5:  920:      return 0;
        -:  921:
        -:  922:    case great_hall:
        -:  923:      //+1 Card
    #####:  924:      drawCard(currentPlayer, state);
        -:  925:
        -:  926:      //+1 Actions
    #####:  927:      state->numActions++;
        -:  928:
        -:  929:      //discard card from hand
    #####:  930:      discardCard(handPos, currentPlayer, state, 0);
    #####:  931:      return 0;
        -:  932:
        -:  933:    case minion:
        -:  934:      //+1 action
    #####:  935:      state->numActions++;
        -:  936:
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
        -:  939:
    #####:  940:      if (choice1)		//+2 coins
        -:  941:      {
    #####:  942:        state->coins = state->coins + 2;
        -:  943:      }
        -:  944:
    #####:  945:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  946:      {
        -:  947:        //discard hand
    #####:  948:        while(numHandCards(state) > 0)
        -:  949:        {
    #####:  950:          discardCard(handPos, currentPlayer, state, 0);
        -:  951:        }
        -:  952:
        -:  953:        //draw 4
    #####:  954:        for (i = 0; i < 4; i++)
        -:  955:        {
    #####:  956:          drawCard(currentPlayer, state);
        -:  957:        }
        -:  958:
        -:  959:        //other players discard hand and redraw if hand size > 4
    #####:  960:        for (i = 0; i < state->numPlayers; i++)
        -:  961:        {
    #####:  962:          if (i != currentPlayer)
        -:  963:          {
    #####:  964:            if ( state->handCount[i] > 4 )
        -:  965:            {
        -:  966:              //discard hand
    #####:  967:              while( state->handCount[i] > 0 )
        -:  968:              {
    #####:  969:                discardCard(handPos, i, state, 0);
        -:  970:              }
        -:  971:
        -:  972:              //draw 4
    #####:  973:              for (j = 0; j < 4; j++)
        -:  974:              {
    #####:  975:                drawCard(i, state);
        -:  976:              }
        -:  977:            }
        -:  978:          }
        -:  979:        }
        -:  980:
        -:  981:      }
    #####:  982:      return 0;
        -:  983:
        -:  984:    case steward:
    #####:  985:      if (choice1 == 1)
        -:  986:      {
        -:  987:        //+2 cards
    #####:  988:        drawCard(currentPlayer, state);
    #####:  989:        drawCard(currentPlayer, state);
        -:  990:      }
    #####:  991:      else if (choice1 == 2)
        -:  992:      {
        -:  993:        //+2 coins
    #####:  994:        state->coins = state->coins + 2;
        -:  995:      }
        -:  996:      else
        -:  997:      {
        -:  998:        //trash 2 cards in hand
    #####:  999:        discardCard(choice2, currentPlayer, state, 1);
    #####: 1000:        discardCard(choice3, currentPlayer, state, 1);
        -: 1001:      }
        -: 1002:
        -: 1003:      //discard card from hand
    #####: 1004:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1005:      return 0;
        -: 1006:
        -: 1007:    case tribute:
    #####: 1008:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1009:        if (state->deckCount[nextPlayer] > 0){
    #####: 1010:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1011:          state->deckCount[nextPlayer]--;
        -: 1012:        }
    #####: 1013:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1014:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1015:          state->discardCount[nextPlayer]--;
        -: 1016:        }
        -: 1017:        else{
        -: 1018:          //No Card to Reveal
        -: 1019:          if (DEBUG){
        -: 1020:            printf("No cards to reveal\n");
        -: 1021:          }
        -: 1022:        }
        -: 1023:      }
        -: 1024:
        -: 1025:      else{
    #####: 1026:        if (state->deckCount[nextPlayer] == 0){
    #####: 1027:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1028:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1029:            state->deckCount[nextPlayer]++;
    #####: 1030:            state->discard[nextPlayer][i] = -1;
    #####: 1031:            state->discardCount[nextPlayer]--;
        -: 1032:          }
        -: 1033:
    #####: 1034:          shuffle(nextPlayer,state);//Shuffle the deck
        -: 1035:        }
    #####: 1036:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:        state->deckCount[nextPlayer]--;
    #####: 1039:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1041:        state->deckCount[nextPlayer]--;
        -: 1042:      }
        -: 1043:
    #####: 1044:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1045:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1046:        state->playedCardCount++;
    #####: 1047:        tributeRevealedCards[1] = -1;
        -: 1048:      }
        -: 1049:
    #####: 1050:      for (i = 0; i <= 2; i ++){
    #####: 1051:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1052:          state->coins += 2;
        -: 1053:        }
        -: 1054:
    #####: 1055:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1056:          drawCard(currentPlayer, state);
    #####: 1057:          drawCard(currentPlayer, state);
        -: 1058:        }
        -: 1059:        else{//Action Card
    #####: 1060:          state->numActions = state->numActions + 2;
        -: 1061:        }
        -: 1062:      }
        -: 1063:
    #####: 1064:      return 0;
        -: 1065:
        -: 1066:    case ambassador:
    #####: 1067:      j = 0;		//used to check if player has enough cards to discard
        -: 1068:
    #####: 1069:      if (choice2 > 2 || choice2 < 0)
        -: 1070:      {
    #####: 1071:        return -1;
        -: 1072:      }
        -: 1073:
    #####: 1074:      if (choice1 == handPos)
        -: 1075:      {
    #####: 1076:        return -1;
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:      {
    #####: 1081:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1082:        {
    #####: 1083:          j++;
        -: 1084:        }
        -: 1085:      }
    #####: 1086:      if (j < choice2)
        -: 1087:      {
    #####: 1088:        return -1;
        -: 1089:      }
        -: 1090:
        -: 1091:      if (DEBUG)
        -: 1092:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1093:
        -: 1094:      //increase supply count for choosen card by amount being discarded
    #####: 1095:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1096:
        -: 1097:      //each other player gains a copy of revealed card
    #####: 1098:      for (i = 0; i < state->numPlayers; i++)
        -: 1099:      {
    #####: 1100:        if (i != currentPlayer)
        -: 1101:        {
    #####: 1102:          gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1103:        }
        -: 1104:      }
        -: 1105:
        -: 1106:      //discard played card from hand
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);
        -: 1108:
        -: 1109:      //trash copies of cards returned to supply
    #####: 1110:      for (j = 0; j < choice2; j++)
        -: 1111:      {
    #####: 1112:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:        {
    #####: 1114:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1115:          {
    #####: 1116:            discardCard(i, currentPlayer, state, 1);
    #####: 1117:            break;
        -: 1118:          }
        -: 1119:        }
        -: 1120:      }
        -: 1121:
    #####: 1122:      return 0;
        -: 1123:
        -: 1124:    case cutpurse:
        -: 1125:
    #####: 1126:      updateCoins(currentPlayer, state, 2);
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:      {
    #####: 1129:        if (i != currentPlayer)
        -: 1130:        {
    #####: 1131:          for (j = 0; j < state->handCount[i]; j++)
        -: 1132:          {
    #####: 1133:            if (state->hand[i][j] == copper)
        -: 1134:            {
    #####: 1135:              discardCard(j, i, state, 0);
    #####: 1136:              break;
        -: 1137:            }
    #####: 1138:            if (j == state->handCount[i])
        -: 1139:            {
    #####: 1140:              for (k = 0; k < state->handCount[i]; k++)
        -: 1141:              {
        -: 1142:                if (DEBUG)
        -: 1143:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1144:              }
    #####: 1145:              break;
        -: 1146:            }
        -: 1147:          }
        -: 1148:
        -: 1149:        }
        -: 1150:
        -: 1151:      }
        -: 1152:
        -: 1153:      //discard played card from hand
    #####: 1154:      discardCard(handPos, currentPlayer, state, 0);
        -: 1155:
    #####: 1156:      return 0;
        -: 1157:
        -: 1158:
        -: 1159:    case embargo:
        -: 1160:      //+2 Coins
    #####: 1161:      state->coins = state->coins + 2;
        -: 1162:
        -: 1163:      //see if selected pile is in play
    #####: 1164:      if ( state->supplyCount[choice1] == -1 )
        -: 1165:      {
    #####: 1166:        return -1;
        -: 1167:      }
        -: 1168:
        -: 1169:      //add embargo token to selected supply pile
    #####: 1170:      state->embargoTokens[choice1]++;
        -: 1171:
        -: 1172:      //trash card
    #####: 1173:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1174:      return 0;
        -: 1175:
        -: 1176:    case outpost:
        -: 1177:      //set outpost flag
    #####: 1178:      state->outpostPlayed++;
        -: 1179:
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:      return 0;
        -: 1183:
        -: 1184:    case salvager:
        -: 1185:      //+1 buy
    #####: 1186:      state->numBuys++;
        -: 1187:
    #####: 1188:      if (choice1)
        -: 1189:      {
        -: 1190:        //gain coins equal to trashed card
    #####: 1191:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1192:        //trash card
    #####: 1193:        discardCard(choice1, currentPlayer, state, 1);
        -: 1194:      }
        -: 1195:
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    case sea_hag:
    #####: 1201:      for (i = 0; i < state->numPlayers; i++){
    #####: 1202:        if (i != currentPlayer){
    #####: 1203:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1204:          state->discardCount[i]++;
    #####: 1205:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1206:        }
        -: 1207:      }
    #####: 1208:      return 0;
        -: 1209:
        -: 1210:    case treasure_map:
        -: 1211:      //search hand for another treasure_map
    #####: 1212:      index = -1;
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:      {
    #####: 1215:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1216:        {
    #####: 1217:          index = i;
    #####: 1218:          break;
        -: 1219:        }
        -: 1220:      }
    #####: 1221:      if (index > -1)
        -: 1222:      {
        -: 1223:        //trash both treasure cards
    #####: 1224:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1225:        discardCard(index, currentPlayer, state, 1);
        -: 1226:
        -: 1227:        //gain 4 Gold cards
    #####: 1228:        for (i = 0; i < 4; i++)
        -: 1229:        {
    #####: 1230:          gainCard(gold, state, 1, currentPlayer);
        -: 1231:        }
        -: 1232:
        -: 1233:        //return success
    #####: 1234:        return 1;
        -: 1235:      }
        -: 1236:
        -: 1237:      //no second treasure_map found in hand
    #####: 1238:      return -1;
        -: 1239:  }
        -: 1240:
        2: 1241:  return -1;
        -: 1242:}
        -: 1243:
        8: 1244:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1245:{
        -: 1246:
        -: 1247:  //if card is not trashed, added to Played pile
        8: 1248:  if (trashFlag < 1)
        -: 1249:  {
        -: 1250:    //add card to played pile
        8: 1251:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1252:    state->playedCardCount++;
        -: 1253:  }
        -: 1254:
        -: 1255:  //set played card to -1
        8: 1256:  state->hand[currentPlayer][handPos] = -1;
        -: 1257:
        -: 1258:  //remove card from player's hand
        8: 1259:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1260:  {
        -: 1261:    //reduce number of cards in hand
        1: 1262:    state->handCount[currentPlayer]--;
        -: 1263:  }
        7: 1264:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1265:  {
        -: 1266:    //reduce number of cards in hand
    #####: 1267:    state->handCount[currentPlayer]--;
        -: 1268:  }
        -: 1269:  else
        -: 1270:  {
        -: 1271:    //replace discarded card with last card in hand
        7: 1272:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1273:    //set last card to -1
        7: 1274:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1275:    //reduce number of cards in hand
        7: 1276:    state->handCount[currentPlayer]--;
        -: 1277:  }
        -: 1278:
        8: 1279:  return 0;
        -: 1280:}
        -: 1281:
        4: 1282:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1283:{
        -: 1284:  //Note: supplyPos is enum of choosen card
        -: 1285:
        -: 1286:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1287:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1288:  {
    #####: 1289:    return -1;
        -: 1290:  }
        -: 1291:
        -: 1292:  //added card for [whoseTurn] current player:
        -: 1293:  // toFlag = 0 : add to discard
        -: 1294:  // toFlag = 1 : add to deck
        -: 1295:  // toFlag = 2 : add to hand
        -: 1296:
        4: 1297:  if (toFlag == 1)
        -: 1298:  {
    #####: 1299:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1300:    state->deckCount[player]++;
        -: 1301:  }
        4: 1302:  else if (toFlag == 2)
        -: 1303:  {
        2: 1304:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1305:    state->handCount[player]++;
        -: 1306:  }
        -: 1307:  else
        -: 1308:  {
        2: 1309:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1310:    state->discardCount[player]++;
        -: 1311:  }
        -: 1312:
        -: 1313:  //decrease number in supply pile
        4: 1314:  state->supplyCount[supplyPos]--;
        -: 1315:
        4: 1316:  return 0;
        -: 1317:}
        -: 1318:
       24: 1319:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1320:{
        -: 1321:  int i;
        -: 1322:
        -: 1323:  //reset coin count
       24: 1324:  state->coins = 0;
        -: 1325:
        -: 1326:  //add coins for each Treasure card in player's hand
      167: 1327:  for (i = 0; i < state->handCount[player]; i++)
        -: 1328:  {
      143: 1329:    if (state->hand[player][i] == copper)
        -: 1330:    {
       87: 1331:      state->coins += 1;
        -: 1332:    }
       56: 1333:    else if (state->hand[player][i] == silver)
        -: 1334:    {
       14: 1335:      state->coins += 2;
        -: 1336:    }
       42: 1337:    else if (state->hand[player][i] == gold)
        -: 1338:    {
       13: 1339:      state->coins += 3;
        -: 1340:    }
        -: 1341:  }
        -: 1342:
        -: 1343:  //add bonus
       24: 1344:  state->coins += bonus;
        -: 1345:
       24: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:
        -: 1350://end of dominion.c
