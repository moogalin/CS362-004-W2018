***************************************
*         Testing: Smithy Card   
***************************************

Srand Seed: Sun Feb 18 09:41:12 2018

*       RESULT: Actual handCount did not equal expected 9997 out of 10000 times.
*       RESULT: Actual discardCount did not equal expected 10000 out of 10000 times.
*       RESULT: Actual deckCount did not equal expected 9999 out of 10000 times.
***************************************

File 'dominion.c'
Lines executed:25.73% of 579
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  3985976:    8:int compare(const void* a, const void* b) {
  3985976:    9:  if (*(int*)a > *(int*)b)
  1304567:   10:    return 1;
  2681409:   11:  if (*(int*)a < *(int*)b)
   839081:   12:    return -1;
  1842328:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    30000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    30000:   44:  SelectStream(1);
    30000:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    30000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    30000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   330000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  3300000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  3000000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    30000:   73:  if (numPlayers == 2)
        -:   74:    {
    11515:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    18485:   77:  else if (numPlayers == 3)
        -:   78:    {
    11779:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     6706:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    30000:   87:  if (numPlayers == 2)
        -:   88:    {
    11515:   89:      state->supplyCount[estate] = 8;
    11515:   90:      state->supplyCount[duchy] = 8;
    11515:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    18485:   95:      state->supplyCount[estate] = 12;
    18485:   96:      state->supplyCount[duchy] = 12;
    18485:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    30000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    30000:  102:  state->supplyCount[silver] = 40;
    30000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   630000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  4950000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  4650000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   300000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    60000:  115:		  if (numPlayers == 2){
    11515:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    18485:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   270000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   300000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  4350000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   115191:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    85191:  140:      state->deckCount[i] = 0;
   340764:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   255573:  143:	  state->deck[i][j] = estate;
   255573:  144:	  state->deckCount[i]++;
        -:  145:	}
   681528:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   596337:  148:	  state->deck[i][j] = copper;
   596337:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   115191:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    85191:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   115191:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    85191:  166:      state->handCount[i] = 0;
    85191:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
   840000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   810000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    30000:  182:  state->outpostPlayed = 0;
    30000:  183:  state->phase = 0;
    30000:  184:  state->numActions = 1;
    30000:  185:  state->numBuys = 1;
    30000:  186:  state->playedCardCount = 0;
    30000:  187:  state->whoseTurn = 0;
    30000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   180000:  192:  for (it = 0; it < 5; it++){
   150000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    30000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    30000:  198:  return 0;
        -:  199:}
        -:  200:
   112312:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   112312:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        -:  209:  //Look more into this return value case
   112312:  210:  if (state->deckCount[player] < 1)
    18476:  211:    return -1;
    93836:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
  1586977:  215:  while (state->deckCount[player] > 0) {
  1399305:  216:    card = floor(Random() * state->deckCount[player]);
  1399305:  217:    newDeck[newDeckPos] = state->deck[player][card];
  1399305:  218:    newDeckPos++;
 14717318:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
 13318013:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
  1399305:  222:    state->deckCount[player]--;
        -:  223:  }
  1493141:  224:  for (i = 0; i < newDeckPos; i++) {
  1399305:  225:    state->deck[player][i] = newDeck[i];
  1399305:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
    93836:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:
    #####:  270:  return 0;
        -:  271:}
        -:  272:
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:
    #####:  309:  return 0;
        -:  310:}
        -:  311:
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
    #####:  321:int supplyCount(int card, struct gameState *state) {
    #####:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
    #####:  347:int whoseTurn(struct gameState *state) {
    #####:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
  1249574:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  1249574:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
   561078:  534:    for (i = 0; i < state->discardCount[player];i++){
   547395:  535:      state->deck[player][i] = state->discard[player][i];
   547395:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    13683:  539:    state->deckCount[player] = state->discardCount[player];
    13683:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    13683:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:
    13683:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    13683:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:
    13683:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    13683:  560:    if (deckCounter == 0)
     5038:  561:      return -1;
        -:  562:
     8645:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     8645:  564:    state->deckCount[player]--;
     8645:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
  1235891:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1235891:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1235891:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1235891:  577:    state->deckCount[player]--;
  1235891:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  1244536:  581:  return 0;
        -:  582:}
        -:  583:
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber )
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo:
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:
    #####:  644:  return -1;
        -:  645:}
        -:  646:
    10000:  647:int play_adventurer(struct gameState *state, int drawntreasure, int currentPlayer, int z)
        -:  648:{
        -:  649:  //printf("play adventurer\n");
        -:  650:  int cardDrawn;
        -:  651:  int temphand[MAX_HAND];
  1069574:  652:  while(drawntreasure<2){
        -:  653:    //printf("in while\n");
  1049574:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  655:      //printf("shuffle\n");
    13438:  656:      shuffle(currentPlayer, state);
        -:  657:    }
        -:  658:    //printf("draw\n");
  1049574:  659:    drawCard(currentPlayer, state);
  1049574:  660:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1049574:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
        -:  662:      //printf("drawntreasure\n");
    20000:  663:      drawntreasure++;
        -:  664:    }
        -:  665:    else{
        -:  666:      //printf("not treasure\n");
  1029574:  667:      temphand[z]=cardDrawn;
  1029574:  668:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  1029574:  669:      z++;
        -:  670:    }
        -:  671:  }
  1160727:  672:  while(z-1>=0){
        -:  673:    //printf("z");
  1140727:  674:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1140727:  675:    z=z-1;
        -:  676:  }
        -:  677:  //printf("\n");
    10000:  678:  return 0;
        -:  679:}
        -:  680:
    10000:  681:int play_smithy(int currentPlayer, struct gameState * state, int handPos)
        -:  682:{
    10000:  683:  int i = 0;
        -:  684:  //+3 Cards
    50000:  685:  for (i = 0; i <= 3; i++)
        -:  686:  {
    40000:  687:    drawCard(currentPlayer, state);
        -:  688:  }
        -:  689:
        -:  690:  //discard card from hand
    10000:  691:  discardCard(handPos, currentPlayer, state, 1);
    10000:  692:  return 0;
        -:  693:
        -:  694:}
        -:  695:
    #####:  696:int play_mine(int currentPlayer, struct gameState * state, int choice1, int choice2, int handPos)
        -:  697:{
        -:  698:  int i, j;
    #####:  699:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  700:
    #####:  701:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  702:  {
    #####:  703:    return -1;
        -:  704:  }
        -:  705:
    #####:  706:  if (choice2 > treasure_map || choice2 < curse)
        -:  707:  {
    #####:  708:    return -1;
        -:  709:  }
        -:  710:
    #####:  711:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  712:  {
    #####:  713:    return -1;
        -:  714:  }
        -:  715:
    #####:  716:  gainCard(choice2, state, 2, currentPlayer);
        -:  717:
        -:  718:  //discard card from hand
    #####:  719:  discardCard(handPos, currentPlayer, state, 0);
        -:  720:
        -:  721:  //discard trashed card
    #####:  722:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  723:  {
    #####:  724:    if (state->hand[currentPlayer][i] == j)
        -:  725:    {
    #####:  726:      discardCard(i, currentPlayer, state, 0);
        -:  727:      //break;
        -:  728:    }
        -:  729:  }
        -:  730:
    #####:  731:  return 0;
        -:  732:}
        -:  733:
    #####:  734:int play_ambassador(int currentPlayer, struct gameState * state, int choice1, int choice2, int handPos)
        -:  735:{
        -:  736:  int i,j;
        -:  737:
    #####:  738:  j = 0;		//used to check if player has enough cards to discard
        -:  739:
    #####:  740:  if (choice2 > 2 || choice2 < 0)
        -:  741:  {
    #####:  742:    return -1;
        -:  743:  }
        -:  744:
    #####:  745:  if (choice1 == handPos)
        -:  746:  {
    #####:  747:    return -1;
        -:  748:  }
        -:  749:
    #####:  750:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  751:  {
    #####:  752:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  753:    {
    #####:  754:      j++;
        -:  755:    }
        -:  756:  }
        -:  757:
    #####:  758:  if (j < choice2)
        -:  759:  {
    #####:  760:    return -1;
        -:  761:  }
        -:  762:
        -:  763:  if (DEBUG)
        -:  764:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  765:
        -:  766:    //increase supply count for choosen card by amount being discarded
    #####:  767:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  768:
        -:  769:    //each other player gains a copy of revealed card
    #####:  770:  for (i = 0; i < state->numPlayers; i++)
        -:  771:  {
    #####:  772:    if (i != currentPlayer)
        -:  773:    {
    #####:  774:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  775:    }
        -:  776:  }
        -:  777:
        -:  778:  //discard played card from hand
    #####:  779:  discardCard(handPos, currentPlayer, state, 0);
        -:  780:
        -:  781:  //trash copies of cards returned to supply
    #####:  782:  for (j = 0; j < choice2; j++)
        -:  783:  {
    #####:  784:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  785:    {
    #####:  786:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  787:      {
    #####:  788:        discardCard(i, currentPlayer, state, 1);
    #####:  789:        break;
        -:  790:      }
        -:  791:    }
        -:  792:  }
        -:  793:
    #####:  794:  return 0;
        -:  795:
        -:  796:}
        -:  797:
    10000:  798:int play_village(int currentPlayer, struct gameState * state, int handPos){
        -:  799:  //+1 Card
    10000:  800:  drawCard(currentPlayer, state);
        -:  801:
        -:  802:  //+2 Actions
    10000:  803:  state->numActions = state->numActions + 2;
        -:  804:
        -:  805:  //discard played card from hand
    10000:  806:  discardCard(handPos, currentPlayer, state, 0);
        -:  807:
    10000:  808:  return 0;
        -:  809:}
        -:  810:
    #####:  811:int play_treasure_map(int currentPlayer, struct gameState *state, int handPos)
        -:  812:{
        -:  813:  int index;
        -:  814:  int i;
        -:  815:  //search hand for another treasure_map
    #####:  816:  index = -1;
    #####:  817:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  818:  {
    #####:  819:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -:  820:    {
    #####:  821:      index = i;
    #####:  822:      break;
        -:  823:    }
        -:  824:  }
        -:  825:
    #####:  826:  if (index == -1)
        -:  827:  {
        -:  828:    //trash both treasure cards
    #####:  829:    discardCard(handPos, currentPlayer, state, 1);
    #####:  830:    discardCard(index, currentPlayer, state, 1);
        -:  831:
        -:  832:    //gain 4 Gold cards
    #####:  833:    for (i = 0; i < 4; i++)
        -:  834:    {
    #####:  835:      gainCard(gold, state, 1, currentPlayer);
        -:  836:    }
        -:  837:
        -:  838:    //return success
    #####:  839:    return 1;
        -:  840:  }
        -:  841:
        -:  842:  //no second treasure_map found in hand
    #####:  843:  return -1;
        -:  844:}
        -:  845:
    #####:  846:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  847:{
        -:  848:  int i;
        -:  849:  int j;
        -:  850:  int k;
        -:  851:  int x;
        -:  852:  //int index;
    #####:  853:  int currentPlayer = whoseTurn(state);
    #####:  854:  int nextPlayer = currentPlayer + 1;
        -:  855:
    #####:  856:  int tributeRevealedCards[2] = {-1, -1};
        -:  857:  int temphand[MAX_HAND];// moved above the if statement
    #####:  858:  int drawntreasure=0;
        -:  859:  //int cardDrawn;
    #####:  860:  int z = 0;// this is the counter for the temp hand
    #####:  861:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  862:    nextPlayer = 0;
        -:  863:  }
        -:  864:
        -:  865:  //uses switch to select card and perform actions
    #####:  866:  if (card == adventurer)  {
    #####:  867:      return play_adventurer(state, drawntreasure, currentPlayer, z);
        -:  868:  }
        -:  869:
    #####:  870:  else if (card == council_room)  {
        -:  871:      //+4 Cards
    #####:  872:      for (i = 0; i < 4; i++)
        -:  873:	    {
    #####:  874:	      drawCard(currentPlayer, state);
        -:  875:	    }
        -:  876:
        -:  877:      //+1 Buy
    #####:  878:      state->numBuys++;
        -:  879:
        -:  880:      //Each other player draws a card
    #####:  881:      for (i = 0; i < state->numPlayers; i++)
        -:  882:	    {
    #####:  883:	        if ( i != currentPlayer )
        -:  884:	        {
    #####:  885:	           drawCard(i, state);
        -:  886:	        }
        -:  887:	    }
        -:  888:
        -:  889:      //put played card in played card pile
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:
    #####:  892:      return 0;
        -:  893:  }
        -:  894:
    #####:  895:  else if (card == feast) {
        -:  896:      //gain card with cost up to 5
        -:  897:      //Backup hand
    #####:  898:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  899:	       temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  900:	        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  901:      }
        -:  902:      //Backup hand
        -:  903:
        -:  904:      //Update Coins for Buy
    #####:  905:      updateCoins(currentPlayer, state, 5);
    #####:  906:      x = 1;//Condition to loop on
    #####:  907:      while( x == 1) {//Buy one card
    #####:  908:	       if (supplyCount(choice1, state) <= 0){
        -:  909:	          if (DEBUG)
        -:  910:	           printf("None of that card left, sorry!\n");
        -:  911:
        -:  912:	            if (DEBUG){
        -:  913:	               printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  914:	              }
        -:  915:	         }
    #####:  916:	          else if (state->coins < getCost(choice1)){
    #####:  917:	             printf("That card is too expensive!\n");
        -:  918:	              if (DEBUG){
        -:  919:	                 printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  920:	                }
        -:  921:	           }
        -:  922:	            else{
        -:  923:	               if (DEBUG){
        -:  924:	                  printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  925:	                 }
        -:  926:
    #####:  927:	                  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  928:	                   x = 0;//No more buying cards
        -:  929:
        -:  930:	                    if (DEBUG){
        -:  931:	                       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  932:	                      }
        -:  933:	             }
        -:  934:         }
        -:  935:
        -:  936:      //Reset Hand
    #####:  937:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  938:	       state->hand[currentPlayer][i] = temphand[i];
    #####:  939:	        temphand[i] = -1;
        -:  940:      }
        -:  941:        //Reset Hand
    #####:  942:      return 0;
        -:  943:    }
        -:  944:
    #####:  945:  else if (card == gardens) {
    #####:  946:    return -1;
        -:  947:  }
        -:  948:
    #####:  949:  else if (card == mine) {
    #####:  950:      return play_mine(currentPlayer, state, choice1, choice2, handPos);
        -:  951:  }
        -:  952:
    #####:  953:  else if (card == remodel) {
    #####:  954:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  955:
    #####:  956:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  957:	     {
    #####:  958:	        return -1;
        -:  959:	       }
        -:  960:
    #####:  961:      gainCard(choice2, state, 0, currentPlayer);
        -:  962:
        -:  963:      //discard card from hand
    #####:  964:      discardCard(handPos, currentPlayer, state, 0);
        -:  965:
        -:  966:      //discard trashed card
    #####:  967:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  968:	     {
    #####:  969:	        if (state->hand[currentPlayer][i] == j)
        -:  970:	         {
    #####:  971:	            discardCard(i, currentPlayer, state, 0);
    #####:  972:	             break;
        -:  973:	            }
        -:  974:	     }
    #####:  975:      return 0;
        -:  976:  }
        -:  977:
    #####:  978:  else if (card == smithy) {
    #####:  979:      return play_smithy(currentPlayer, state, handPos);
        -:  980:    }
        -:  981:
    #####:  982:  else if (card == village) {
        -:  983:
    #####:  984:      return play_village(currentPlayer, state, handPos);
        -:  985:    }
        -:  986:
    #####:  987:  else if (card == baron) {
    #####:  988:      state->numBuys++;//Increase buys by 1!
    #####:  989:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  990:	       int p = 0;//Iterator for hand!
    #####:  991:	        int card_not_discarded = 1;//Flag for discard set!
    #####:  992:	         while(card_not_discarded){
    #####:  993:	            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  994:	               state->coins += 4;//Add 4 coins to the amount of coins
    #####:  995:	                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  996:	                 state->discardCount[currentPlayer]++;
    #####:  997:	                  for (;p < state->handCount[currentPlayer]; p++){
    #####:  998:	                     state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  999:	                    }
    #####: 1000:	                    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1001:	                     state->handCount[currentPlayer]--;
    #####: 1002:	                      card_not_discarded = 0;//Exit the loop
        -: 1003:	              }
    #####: 1004:	               else if (p > state->handCount[currentPlayer]){
        -: 1005:	                  if(DEBUG) {
        -: 1006:	                     printf("No estate cards in your hand, invalid choice\n");
        -: 1007:	                      printf("Must gain an estate if there are any\n");
        -: 1008:	                     }
    #####: 1009:	                  if (supplyCount(estate, state) > 0){
    #####: 1010:	                     gainCard(estate, state, 0, currentPlayer);
    #####: 1011:	                      state->supplyCount[estate]--;//Decrement estates
    #####: 1012:	                   if (supplyCount(estate, state) == 0){
    #####: 1013:		                     isGameOver(state);
        -: 1014:	                      }
        -: 1015:	                  }
    #####: 1016:	                   card_not_discarded = 0;//Exit the loop
        -: 1017:	                  }
        -: 1018:
        -: 1019:	                   else{
    #####: 1020:	                      p++;//Next card
        -: 1021:	                     }
        -: 1022:	                    }
        -: 1023:      }
        -: 1024:      else{
    #####: 1025:	       if (supplyCount(estate, state) > 0){
    #####: 1026:	          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1027:	           state->supplyCount[estate]--;//Decrement Estates
    #####: 1028:	            if (supplyCount(estate, state) == 0){
    #####: 1029:	               isGameOver(state);
        -: 1030:	              }
        -: 1031:	             }
        -: 1032:      }
    #####: 1033:    return 0;
        -: 1034:  }
        -: 1035:
    #####: 1036:  else if (card == great_hall) {
        -: 1037:      //+1 Card
    #####: 1038:      drawCard(currentPlayer, state);
        -: 1039:
        -: 1040:      //+1 Actions
    #####: 1041:      state->numActions++;
        -: 1042:
        -: 1043:      //discard card from hand
    #####: 1044:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1045:      return 0;
        -: 1046:  }
        -: 1047:
    #####: 1048:  else if (card == minion) {
        -: 1049:      //+1 action
    #####: 1050:      state->numActions++;
        -: 1051:
        -: 1052:      //discard card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);
        -: 1054:
    #####: 1055:      if (choice1)		//+2 coins
        -: 1056:	     {
    #####: 1057:	        state->coins = state->coins + 2;
        -: 1058:	       }
        -: 1059:
    #####: 1060:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1061:	     {
        -: 1062:	        //discard hand
    #####: 1063:	         while(numHandCards(state) > 0)
        -: 1064:	          {
    #####: 1065:	             discardCard(handPos, currentPlayer, state, 0);
        -: 1066:	            }
        -: 1067:
        -: 1068:	             //draw 4
    #####: 1069:	              for (i = 0; i < 4; i++)
        -: 1070:	               {
    #####: 1071:	                  drawCard(currentPlayer, state);
        -: 1072:	                 }
        -: 1073:
        -: 1074:	  //other players discard hand and redraw if hand size > 4
    #####: 1075:	  for (i = 0; i < state->numPlayers; i++)
        -: 1076:	    {
    #####: 1077:	      if (i != currentPlayer)
        -: 1078:		{
    #####: 1079:		  if ( state->handCount[i] > 4 )
        -: 1080:		    {
        -: 1081:		      //discard hand
    #####: 1082:		      while( state->handCount[i] > 0 )
        -: 1083:			{
    #####: 1084:			  discardCard(handPos, i, state, 0);
        -: 1085:			}
        -: 1086:
        -: 1087:		      //draw 4
    #####: 1088:		      for (j = 0; j < 4; j++)
        -: 1089:			{
    #####: 1090:			  drawCard(i, state);
        -: 1091:			}
        -: 1092:		    }
        -: 1093:		}
        -: 1094:	    }
        -: 1095:
        -: 1096:	  }
    #####: 1097:      return 0;
        -: 1098:   }
        -: 1099:
    #####: 1100:  else if (card ==  steward) {
    #####: 1101:      if (choice1 == 1)
        -: 1102:	     {
        -: 1103:	        //+2 cards
    #####: 1104:	         drawCard(currentPlayer, state);
    #####: 1105:	          drawCard(currentPlayer, state);
        -: 1106:	         }
    #####: 1107:      else if (choice1 == 2)
        -: 1108:	     {
        -: 1109:	        //+2 coins
    #####: 1110:	         state->coins = state->coins + 2;
        -: 1111:	        }
        -: 1112:          else
        -: 1113:	         {
        -: 1114:  	  //trash 2 cards in hand
    #####: 1115:	     discardCard(choice2, currentPlayer, state, 1);
    #####: 1116:	      discardCard(choice3, currentPlayer, state, 1);
        -: 1117:	     }
        -: 1118:
        -: 1119:      //discard card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1121:      return 0;
        -: 1122:  }
        -: 1123:
    #####: 1124: else if (card == tribute) {
    #####: 1125:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1126:	if (state->deckCount[nextPlayer] > 0){
    #####: 1127:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1128:	  state->deckCount[nextPlayer]--;
        -: 1129:	}
    #####: 1130:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1131:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1132:	  state->discardCount[nextPlayer]--;
        -: 1133:	}
        -: 1134:	else{
        -: 1135:	  //No Card to Reveal
        -: 1136:	  if (DEBUG){
        -: 1137:	    printf("No cards to reveal\n");
        -: 1138:	  }
        -: 1139:	}
        -: 1140:      }
        -: 1141:
        -: 1142:      else{
    #####: 1143:	if (state->deckCount[nextPlayer] == 0){
    #####: 1144:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1145:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1146:	    state->deckCount[nextPlayer]++;
    #####: 1147:	    state->discard[nextPlayer][i] = -1;
    #####: 1148:	    state->discardCount[nextPlayer]--;
        -: 1149:	  }
        -: 1150:
    #####: 1151:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1152:	}
    #####: 1153:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1154:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1155:	state->deckCount[nextPlayer]--;
    #####: 1156:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1157:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1158:	state->deckCount[nextPlayer]--;
        -: 1159:      }
        -: 1160:
    #####: 1161:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1162:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1163:	state->playedCardCount++;
    #####: 1164:	tributeRevealedCards[1] = -1;
        -: 1165:      }
        -: 1166:
    #####: 1167:      for (i = 0; i <= 2; i ++){
    #####: 1168:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1169:	  state->coins += 2;
        -: 1170:	}
        -: 1171:
    #####: 1172:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1173:	  drawCard(currentPlayer, state);
    #####: 1174:	  drawCard(currentPlayer, state);
        -: 1175:	}
        -: 1176:	else{//Action Card
    #####: 1177:	  state->numActions = state->numActions + 2;
        -: 1178:	}
        -: 1179:      }
        -: 1180:
    #####: 1181:      return 0;
        -: 1182: }
        -: 1183:
    #####: 1184:else if (card == ambassador) {
    #####: 1185:      return play_ambassador(currentPlayer, state, choice1, choice2, handPos);
        -: 1186:}
        -: 1187:
    #####: 1188:else if (card == cutpurse) {
        -: 1189:
    #####: 1190:      updateCoins(currentPlayer, state, 2);
    #####: 1191:      for (i = 0; i < state->numPlayers; i++)
        -: 1192:	    {
    #####: 1193:	  if (i != currentPlayer)
        -: 1194:	    {
    #####: 1195:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1196:		{
    #####: 1197:		  if (state->hand[i][j] == copper)
        -: 1198:		    {
    #####: 1199:		      discardCard(j, i, state, 0);
    #####: 1200:		      break;
        -: 1201:		    }
    #####: 1202:		  if (j == state->handCount[i])
        -: 1203:		    {
    #####: 1204:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1205:			{
        -: 1206:			  if (DEBUG)
        -: 1207:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1208:			}
    #####: 1209:		      break;
        -: 1210:		    }
        -: 1211:		}
        -: 1212:
        -: 1213:	    }
        -: 1214:
        -: 1215:	}
        -: 1216:
        -: 1217:      //discard played card from hand
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
        -: 1219:
    #####: 1220:      return 0;
        -: 1221:
        -: 1222:}
        -: 1223:
    #####: 1224:else if (card == embargo) {
        -: 1225:      //+2 Coins
    #####: 1226:      state->coins = state->coins + 2;
        -: 1227:
        -: 1228:      //see if selected pile is in play
    #####: 1229:      if ( state->supplyCount[choice1] == -1 )
        -: 1230:	{
    #####: 1231:	  return -1;
        -: 1232:	}
        -: 1233:
        -: 1234:      //add embargo token to selected supply pile
    #####: 1235:      state->embargoTokens[choice1]++;
        -: 1236:
        -: 1237:      //trash card
    #####: 1238:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1239:      return 0;
        -: 1240:}
        -: 1241:
    #####: 1242:else if (card == outpost) {
        -: 1243:      //set outpost flag
    #####: 1244:      state->outpostPlayed++;
        -: 1245:
        -: 1246:      //discard card
    #####: 1247:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:      return 0;
        -: 1249:}
        -: 1250:
    #####: 1251:else if (card == salvager) {
        -: 1252:      //+1 buy
    #####: 1253:      state->numBuys++;
        -: 1254:
    #####: 1255:      if (choice1)
        -: 1256:	{
        -: 1257:	  //gain coins equal to trashed card
    #####: 1258:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1259:	  //trash card
    #####: 1260:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1261:	}
        -: 1262:
        -: 1263:      //discard card
    #####: 1264:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1265:      return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:else if (card == sea_hag) {
    #####: 1269:      for (i = 0; i < state->numPlayers; i++){
    #####: 1270:	if (i != currentPlayer){
    #####: 1271:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1272:	  state->discardCount[i]++;
    #####: 1273:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1274:	}
        -: 1275:      }
    #####: 1276:      return 0;
        -: 1277:}
        -: 1278:
    #####: 1279:else if (card == treasure_map) {
    #####: 1280:      return play_treasure_map(currentPlayer, state, handPos);
        -: 1281:}
        -: 1282:
    #####: 1283:  return -1;
        -: 1284:}
        -: 1285:
    20000: 1286:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1287:{
        -: 1288:
        -: 1289:  //if card is not trashed, added to Played pile
    20000: 1290:  if (trashFlag < 1)
        -: 1291:    {
        -: 1292:      //add card to played pile
    10000: 1293:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    10000: 1294:      state->playedCardCount++;
        -: 1295:    }
        -: 1296:
        -: 1297:  //set played card to -1
    20000: 1298:  state->hand[currentPlayer][handPos] = -1;
        -: 1299:
        -: 1300:  //remove card from player's hand
    20000: 1301:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
    20000: 1306:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
    #####: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
        -: 1313:      //replace discarded card with last card in hand
    20000: 1314:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1315:      //set last card to -1
    20000: 1316:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1317:      //reduce number of cards in hand
    20000: 1318:      state->handCount[currentPlayer]--;
        -: 1319:    }
        -: 1320:
    20000: 1321:  return 0;
        -: 1322:}
        -: 1323:
    #####: 1324:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1325:{
        -: 1326:  //Note: supplyPos is enum of choosen card
        -: 1327:
        -: 1328:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1329:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1330:    {
    #####: 1331:      return -1;
        -: 1332:    }
        -: 1333:
        -: 1334:  //added card for [whoseTurn] current player:
        -: 1335:  // toFlag = 0 : add to discard
        -: 1336:  // toFlag = 1 : add to deck
        -: 1337:  // toFlag = 2 : add to hand
        -: 1338:
    #####: 1339:  if (toFlag == 1)
        -: 1340:    {
    #####: 1341:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1342:      state->deckCount[player]++;
        -: 1343:    }
    #####: 1344:  else if (toFlag == 2)
        -: 1345:    {
    #####: 1346:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1347:      state->handCount[player]++;
        -: 1348:    }
        -: 1349:  else
        -: 1350:    {
    #####: 1351:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1352:      state->discardCount[player]++;
        -: 1353:    }
        -: 1354:
        -: 1355:  //decrease number in supply pile
    #####: 1356:  state->supplyCount[supplyPos]--;
        -: 1357:
    #####: 1358:  return 0;
        -: 1359:}
        -: 1360:
    30000: 1361:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1362:{
        -: 1363:  int i;
        -: 1364:
        -: 1365:  //reset coin count
    30000: 1366:  state->coins = 0;
        -: 1367:
        -: 1368:  //add coins for each Treasure card in player's hand
   180000: 1369:  for (i = 0; i < state->handCount[player]; i++)
        -: 1370:    {
   150000: 1371:      if (state->hand[player][i] == copper)
        -: 1372:	{
   116206: 1373:	  state->coins += 1;
        -: 1374:	}
    33794: 1375:      else if (state->hand[player][i] == silver)
        -: 1376:	{
    #####: 1377:	  state->coins += 2;
        -: 1378:	}
    33794: 1379:      else if (state->hand[player][i] == gold)
        -: 1380:	{
    #####: 1381:	  state->coins += 3;
        -: 1382:	}
        -: 1383:    }
        -: 1384:
        -: 1385:  //add bonus
    30000: 1386:  state->coins += bonus;
        -: 1387:
    30000: 1388:  return 0;
        -: 1389:}
        -: 1390:
        -: 1391:
        -: 1392://end of dominion.c
